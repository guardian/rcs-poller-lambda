AWSTemplateFormatVersion: 2010-09-09
Description: A lambda to poll RCS
Conditions:
  isProd: !Equals
    - !Ref 'Stage'
    - PROD
Parameters:
  VpcId:
    Description: The VPC in which Flexible Content lives
    Type: AWS::EC2::VPC::Id
  PrivateSubnets:
    Description: The private subnets in which the Flexible Content API isntances live
    Type: List<AWS::EC2::Subnet::Id>
  Stack:
    Description: Stack name
    Type: String
    Default: composer
  App:
    Description: Application name
    Type: String
    Default: rcs-poller-lambda
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - CODE
      - PROD
    Default: CODE
  DeployBucket:
    Description: Bucket where RiffRaff uploads artifacts on deploy
    Type: String
    Default: composer-dist
  GridSnsTopicArn:
    Description: Rights updates will be sent to this SNS Topic
    Type: String
  ComposerCrossAccountRoleArn:
    Description: Role ARN for sending updates to Grid's Kinesis stream
    Type: String
  AlarmTopic:
    Description: SNS topic ARN for Cloudwatch alerts
    Type: String

Mappings:
  Lambda:
    CODE:
      Rate: rate(15 minutes)
    PROD:
      Rate: rate(15 minutes)

Resources:
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the lambda querying capi.
      VpcId: !Ref VpcId
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: VPCPolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DetachNetworkInterface
              - ec2:DeleteNetworkInterface
              Resource: "*"
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - PolicyName: Lambda
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: "*"
        - PolicyName: Configuration
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::rcs-poller-lambda-config/*
        - PolicyName: SNSTopic
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref GridSnsTopicArn
        - PolicyName: KinesisStream
          PolicyDocument:
            Statement:
              Effect: Allow
              Action: sts:AssumeRole
              Resource: !Ref ComposerCrossAccountRoleArn
        - PolicyName: DynamoDbTable
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Scan
              Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/rcs-poller-lambda-${Stage}*
        - PolicyName: CloudWatchMetrics
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - cloudwatch:PutMetricData
              Resource: "*"
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${App}-${Stage}
      Code:
        S3Bucket:
          Ref: DeployBucket
        S3Key: !Sub ${Stack}/${Stage}/${App}/${App}.jar
      VpcConfig:
        SecurityGroupIds:
          - Ref: LambdaSecurityGroup
        SubnetIds: !Ref PrivateSubnets
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
      Description: A lambda to poll RCS
      Handler: com.gu.rcspollerlambda.Lambda::handler
      MemorySize: 1024
      Role: !GetAtt ExecutionRole.Arn
      Runtime: java8
      Timeout: 900

  RateEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: Event sent to process the stream
      ScheduleExpression: !FindInMap [Lambda, !Ref 'Stage', Rate]
      Targets:
        - Id: Lambda
          Arn: !GetAtt Lambda.Arn

  DailyEventLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt Lambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RateEvent.Arn

  RCSPollerLambdaDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub rcs-poller-lambda-${Stage}
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  Alarm:
    Condition: isProd
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub rcs-poller-${Stage}-alarm-errors
      AlarmDescription: Alarm if there are any failures
      Namespace: rcs-poller-alarms
      MetricName: RCSPollerErrors
      Statistic: Minimum
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: breaching
      Threshold: 0
      Period: '900'
      EvaluationPeriods: 4
      AlarmActions:
      - !Ref AlarmTopic
      OKActions:
      - !Ref AlarmTopic
